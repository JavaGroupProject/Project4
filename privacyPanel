import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class PrivacySetting extends JPanel {
	
	private static final long serialVersionUID = 1L;
	
	JLabel description = new JLabel("Please specify your privacy settings.");
	JLabel profilePicture = new JLabel("Profile Picture");
	JLabel personalInformation = new JLabel("Personal Information");
	JLabel photos = new JLabel("Photos");
	JLabel friendList = new JLabel("Friend List");
	
	ImageIcon[] images;
    String[] privacySettingsStrings = {"Public", "Friends", "Friends of Friends", "Private"};
 
    /*
     * Despite its use of EmptyBorder, this panel makes a fine content
     * pane because the empty border just increases the panel's size
     * and is "painted" on top of the panel's normal background.  In
     * other words, the JPanel fills its entire background if it's
     * opaque (which it is by default); adding a border doesn't change that.
     */
    public PrivacySetting() {
        super(new GridBagLayout());
 
        //Load the images and create an array of indexes.
        images = new ImageIcon[privacySettingsStrings.length];
        Integer[] intArray = new Integer[privacySettingsStrings.length];
        for (int i = 0; i < privacySettingsStrings.length; i++) {
            intArray[i] = new Integer(i);
            //the path of each image from a local address
            images[i] = createImageIcon("/InfoSecurity/src/images/" + privacySettingsStrings[i] + ".png");
            if (images[i] != null) {
                images[i].setDescription(privacySettingsStrings[i]);
            }
        }
 
        //Create the combo box for profile picture.
        JComboBox profilePictureList = new JComboBox(intArray);
        ComboBoxRenderer profilePictureRenderer = new ComboBoxRenderer();
        profilePictureRenderer.setPreferredSize(new Dimension(200, 130));
        profilePictureList.setRenderer(profilePictureRenderer);
        profilePictureList.setMaximumRowCount(3);
        
        //Create the combo box for personal information.
        JComboBox personalInformationList = new JComboBox(intArray);
        ComboBoxRenderer personalInformationRenderer = new ComboBoxRenderer();
        personalInformationRenderer.setPreferredSize(new Dimension(200, 130));
        personalInformationList.setRenderer(personalInformationRenderer);
        personalInformationList.setMaximumRowCount(3);
        
        //Create the combo box for photos.
        JComboBox photosList = new JComboBox(intArray);
        ComboBoxRenderer photosRenderer = new ComboBoxRenderer();
        photosRenderer.setPreferredSize(new Dimension(200, 130));
        photosList.setRenderer(photosRenderer);
        photosList.setMaximumRowCount(3);
        
        //Create the combo box for friend list.
        JComboBox friendListList = new JComboBox(intArray);
        ComboBoxRenderer friendListRenderer = new ComboBoxRenderer();
        friendListRenderer.setPreferredSize(new Dimension(200, 130));
        friendListList.setRenderer(friendListRenderer);
        friendListList.setMaximumRowCount(3);
 
        //Set the lay out.
        setBackground(Color.WHITE);
        setSize(300,300);     
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        add(description, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 2;
        add(profilePicture, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 1;
        c.gridy = 2;
        add(profilePictureList, c);
        
        profilePictureList.addActionListener(
        		new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        JComboBox combo = (JComboBox)e.getSource();
                        String selection = (String)combo.getSelectedItem();
                        String resultText = "Your profile picture will be visible to " + selection;
                    }
                }            
        );
     
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 0;
        c.gridy = 4;
        add(personalInformation, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 1;
        c.gridy = 4;
        add(personalInformationList, c);
        
        profilePictureList.addActionListener(
        		new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        JComboBox combo = (JComboBox)e.getSource();
                        String selection = (String)combo.getSelectedItem();
                        String resultText = "Your personal information will be visible to " + selection;
                    }
                }            
        );
     
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 0;
        c.gridy = 6;
        add(photos, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 1;
        c.gridy = 6;
        add(photosList, c);
        
        profilePictureList.addActionListener(
        		new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        JComboBox combo = (JComboBox)e.getSource();
                        String selection = (String)combo.getSelectedItem();
                        String resultText = "Your photos will be visible to " + selection;
                    }
                }            
        );
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 0;
        c.gridy = 8;
        add(friendList, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 1;
        c.gridy = 8;
        add(friendListList, c);
        
        profilePictureList.addActionListener(
        		new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        JComboBox combo = (JComboBox)e.getSource();
                        String selection = (String)combo.getSelectedItem();
                        String resultText = "Your friend list will be visible to " + selection;
                    }
                }            
        );
        
        setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
    }  
    
    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = PrivacySetting.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
                return null;
        }
    }
 
    /**
     * Create the GUI and show it. For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("Privacy Settings");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        //Create and set up the content pane.
        JComponent newContentPane = new PrivacySetting();
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
 
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
 
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    class ComboBoxRenderer extends JLabel implements ListCellRenderer {
        private Font uhOhFont;
 
        public ComboBoxRenderer() {
            setOpaque(true);
            setHorizontalAlignment(CENTER);
            setVerticalAlignment(CENTER);
        }
 
        /*
         * This method finds the image and text corresponding
         * to the selected value and returns the label, set up
         * to display the text and image.
         */
        public Component getListCellRendererComponent(JList list, Object value,
                                           int index, boolean isSelected, boolean cellHasFocus) {
            //Get the selected index. (The index parameter isn't
            //always valid, so just use the value.)
            int selectedIndex = ((Integer)value).intValue();
 
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
 
            //Set the icon and text.  If icon was null, say so.
            ImageIcon icon = images[selectedIndex];
            String p = privacySettingsStrings[selectedIndex];
            setIcon(icon);
            if (icon != null) {
                setText(p);
                setFont(list.getFont());
            } else {
                setUhOhText(p + " (no image available)",
                            list.getFont());
            }

            return this;
        }
 
        //Set the font and text when no image was found.
        protected void setUhOhText(String uhOhText, Font normalFont) {
            if (uhOhFont == null) { //lazily create this font
                uhOhFont = normalFont.deriveFont(Font.ITALIC);
            }
            setFont(uhOhFont);
            setText(uhOhText);
        }
    }
}
